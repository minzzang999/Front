package com.javastudy.functional.stream;

import java.util.Arrays;
import java.util.stream.IntStream;

/* 스트림(Stream) 사용하기
 * Java8에서 새롭게 등장한 스트림(Stream) API는 람다식을 사용할 수 있게
 * 설계되어 함수형 프로그래밍을 지원하는 기술 중 하나이며 입출력을 위한 I/O
 * 스트림과는 전혀 다른 기술이다.
 *  
 * 스트림은 "데이터의 흐름"을 의미하는데 배열 또는 컬렉션에 대해서 여러 메서드를
 * 단계적으로 적용하고 최종적인 결과를 만들어 가는 API가 바로 스트림 이다.
 * 스트림은 배열 또는 컬렉션과 같은 집합 데이터에 스트림이 제공하는 메서드를 적용해
 * 데이터를 가공하고 다음 단계로 연결해 또 다른 스트림의 메서드를 적용해 데이터를
 * 가공하는 작업을 연속적으로 수행할 수 있다. 다시 말해 데이터가 모여 있는 원본
 * 데이터를 바탕으로 스트림을 생성한 후 중간 단계에서 다양한 여러 작업을 연결해
 * 연속적으로 데이터 흐름을 처리(파이프라인 연산)하고 최종적인 결과를 만들 수 있는
 * API이다.
 * 
 * 스트림은 배열, 컬렉션 등의 데이터에 대해서 정렬을 하거나 필터를 적용해 필요한
 * 데이터를 추출해서 최종적으로 숫자에 대해서 평균, 합계 등을 구하는 메서드 또는
 * 최종 결과를 반환하거나 결과를 출력해 주는 메서드를 제공하고 있다. 그러므로 
 * 배열이나 컬렉션 등의 자료를 처리할 때 스트림을 활용하면 대상 자료가 무엇인지
 * 상관없이 스트림의 메서드를 활용할 수 있기 때문에 일관성 있게 자료를 처리할 수
 * 있는 장점이 있다.  
 * 
 * 스트림 작업은 대상 자료에 대해서 스트림을 생성한 후 중간 연산(intermediate 
 * operations)과 최종 연산(terminal operations) 단계로 구분해 데이터를
 * 처리한다.
 * 스트림에는 정렬, 필터, 데이터 변환 등의 중간 연산을 담당하는 메서드와 숫자 집계,
 * 반복 출력, 조건에 맞는 결과 반환 등의 최종 연산을 담당하는 다양한 메서드를 지원한다.   
 **/
public class Stream01 {

	public static void main(String[] args) {
				
		int[] arr = {1, 7, 4, 3, 8, 9, 2, 6, 5, 9, 4, 0, 1, 3, 6, 9, 7};
		
		/* 스트림 생성
		 * 배열 또는 컬렉션 객체로부터 스트림을 생성할 수 있으며 이렇게 생성된
		 * 스트림은 별도의 메모리에서 작업을 하므로 원본 데이터를 변경하지 않는다.
		 **/
		IntStream stream1 = Arrays.stream(arr);
		
		/* 중간 연산
		 * 스트림 연산은 중간 연산과 최종 연산이 있으며 중간 연산은 아래와 같이 여러 
		 * 연산을 연결하여 수행할 수 있다. 아래는 스트림에서 중복된 데이터를 제거하고
		 * 이어서 데이터를 오름차순 정렬하는 중간 연산을 연속적으로 수행한 것이다.
		 **/
		IntStream stream2 = stream1.distinct().sorted();
		
		/* 최종 연산
		 * 중간 연산을 여러 번 수행하더라도 최종 연산을 수행하는 메서드가 호출되어야
		 * 비로소 스트림의 연산이 적용된다. 예를 들어 데이터를 필터링하거나 정렬하는
		 * 중간 연산 메서드가 호출된 후에 최종 연산을 수행하는 메서드가 호출되지 않으면   
		 * 필터링하거나 정렬한 결과를 가져올 수 없게된다. 또한 최종 연산은 각 요소를
		 * 하나씩 순회하면서 연산을 수행하는데 이때 요소들이 "소모 된다"라고 한다. 
		 * 이렇게 소모된 요소는 재사용 할 수 없기 때문에 최종 연산을 수행한 스트림은
		 * 다시 사용할 수 없다. 만약 다른 기능을 수행하려면 스트림을 다시 생성해야 한다.
		 *   
		 * forEach 메서드는 현재 스트림에 있는 요소의 개수만큼 인수로 지정한
		 * 람다식을 호출해 주는 최종 연산을 수행하는 메서드이다.  아래에서 이름 없는
		 * 함수인 람다식은 스트림의 요소를 매개 변수로 받아서 하나씩 콘솔에 출력한다.
		 **/
		stream2.forEach((i) -> System.out.printf("%s ", i < 9 ? i + ", " : i));
		//System.out.println("arr의 크기 : " + stream2.count());
	}
}
