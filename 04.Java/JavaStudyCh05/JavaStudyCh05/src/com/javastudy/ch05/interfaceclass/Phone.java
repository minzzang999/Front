package com.javastudy.ch05.interfaceclass;

// 인터페이스를 이용한 다중상속 구현
/* 인터페이스는 추상 메서드(미완성 메서드)와 상수로만 이루어진 특수한 형태의 클래스 이다.
 * 인터페이스는 미완성이므로 자체적으로 인스턴스를 생성할 수 없고 상속을 통해 완성된다.
 **/
public interface Phone {
	
	/* 인터페이스는 추상 메서드와 상수로만 구성되기 때문에 예약어 없이 아래와 같이
	 * 변수로 선언해도 컴파일러에 의해 public static final이 적용되어 상수가 된다.
	 * 인터페이스의 모든 상수는 public static final이어야 하므로 이 부분은 생략할 수 있다.
	 **/	
	String PHONE_SERIAL_NUMBER = "PHONE_001";
	
	// 전화를 거는 기능을 추상 메소드로 정의
	public abstract void sendPhone();
	
	/* 전화를 받는 기능을 추상 메소드로 정의 
	 * 인터페이스는 추상 메서드와 상수로만 구성되기 때문에 예약어 없이 아래와 같이
	 * 메서드를 선언해도 컴파일러에 의해 public abstract가 적용되어 추상 메서드가 된다.
	 * 인터페이스의 모든 메서드는 public abstract이어야 하므로 이 부분은 생략할 수 있다.
	 **/ 
	void receivePhone();
	
	/* Java7까지는 인터페이스에 static 상수와, 추상 메서드만 정의할 수 있었지만
	 * Java8부터는 인터페이스에 default 메서드와 static 메서드를 추가할 수 있게 되었다.
	 * 인터페이스를 구현하는 여러 하위 클래스에서 사용할 같은 기능의 메서드가 필요한 
	 * 경우가 있는데 Java7까지는 기능이 같다고 해서 인터페이스에서 완성 메서드를
	 * 정의할 수 없었기 때문에 인터페이스에서 추상 메서드를 정의하고 이를 구현하는
	 * 클래스에 같은 기능의 메서드를 각각 구현해야 했다. 이런 경우 Java8부터는     
	 * 아래와 같이 default 메서드를 인터페이스에 정의해 하위 클래스에서 사용할 있게
	 * 되었으며 default 메서드 또한 하위 클래스에서 오버라이드 해서 사용할 수 있다.
	 * 또한 인스턴스 생성없이 사용할 수 있는 static 메서드를 Java8부터 인터페이스에
	 * 정의할 수 있게 되었으므로 인터페이스의 활용성을 더욱 높일 수 있게 되었다.
	 * 인터페이스에 정의한 모든 멤버는 모두 public 접근 지정자를 가지게 된다.  
	 **/
	default void power(String name) {		
		System.out.println(name + " 전원을 켜는 중...");
	}
}
