package com.javastudy.ch02.datatype;

// 문자형(char) 데이터 사용하기
public class CharLiteral01 {
	
	public static void main(String[] args) {
		
		/* 많은 프로그램 언어에서 리터럴(Literal)이라는 단어가 많이 사용되는데 
		 * 리터럴이란 코드에서 사용되는 고정된 값 자체를 의미하는 것으로 변수에 저장되는
		 * 정수, 실수, 논리 값, 문자, 문자열 데이터 자체를 의미 한다. 다시 말해 리터럴은
		 * 아래와 같이 변수 또는 상수에 직접 할당되는 데이터 자체를 말하는 것으로 변수에
		 * 정수가 할당되면 정수 리터럴, 문자열이 할당 되면 문자열 리터럴 등으로 부른다.
		 * 리터럴은 데이터를 표현하는 값 자체이므로 변하지 않기 때문에 상수의 의미를 가진다. 
		 **/
		int i = 100;
		String str = "안녕 자바";
		
		/* 전 세계 문자를 컴퓨터에서 표현하기 위해서 유니코드라는 표준 문자 체계가 만들어
		 * 졌는데 이 유니코드는 문자 하나하나에 코드 값을 매겨 수치 데이터로 저장된다.
		 * 자바는 유니코드 문자 하나를 저장할 수 있는 2byte의 char 형을 제공하고 있다.
		 * 유니코드와 같이 표준화된 문자 체계를 문자 셋이라고도 부른다.		 
		 **/
		char ch1 = '자';
		char ch2 = '바';
				
		/* int형 변수를 char형으로 강제 형 변환하면 유니코드 문자를 얻을 수 있다.
		 * 영문 대문자 A는 유니코드 값 65이며 소문자 a는 유니코드 값 97 이다.
		 **/
		char chA = (char) 65;
		char cha = (char) 97;
		System.out.println(chA + " - " + cha);
				
		// 유니코드의 첫 번째 문자는 공백 문자이며 char형의 기본 값이다.
		char hexaCh1 = '\u0000';
		
		/* 한글은 초성 19개, 중성 21개, 종성 28개를 조합해
		 * 19 x 21 x 28 = 11,172 자의 완성형 한글이 유니코드에 등록되어 있다.
		 * 유니코드에서 한글은 AC00(44032) ~ D7A3(55203)의 범위에 지정되어 있다.
		 **/
		// 0x로 시작하는 정수 데이터는 16진수로 표현하는 정수를 의미한다.
		int hanStart = 0xAC00;
		
		/* 자바에서 char 형은 데이터가 저장될 때 내부적으로 정수로
		 * 변환되어 저장되기 때문에 사칙 연산자를 이용해 산술연산이 가능하다.
		 **/
		System.out.println(ch1 + ch2);
		System.out.println("유니코드 첫 문자 - hexaCh1 : " + hexaCh1);
		
		/* 다음과 같이 유니코드 범위에 있는 정수(0 ~ 65535)를 char 형으로
		 * 형 변환 하면 그 문자 코드 값에 해당하는 유니코드 문자를 확인할 수 있다.
		 **/
		System.out.println("유니코드 한글 첫 문자 : " + (char) hanStart);
		System.out.println("유니코드 한글 마지막 문자 : " + (char) 55203);		
	}
}
