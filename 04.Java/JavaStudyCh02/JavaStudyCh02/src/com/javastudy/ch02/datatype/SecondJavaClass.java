package com.javastudy.ch02.datatype;

// 변수 선언과 문장의 종료
public class SecondJavaClass {	
	
	// 자바에서 main() 메서드가 있는 클래스가 어플리케이션의 실행 진입점이 된다.
	public static void main(String[] args) {
		
		/* 변수는 프로그램 수행 중에 데이터를 담아두는 상자라 할 수 있다. 어떤 
		 * 프로그램이 실행되면 그 프로그램 안의 변수는 컴퓨터의 메인 메모리에
		 * 만들어지는데 이렇게 만들어진 메모리 공간의 이름이 바로 변수인 것이다. 
		 * 프로그램에서는 변수를 통해 메모리에 접근하여 데이터를 저장하거나 
		 * 가져올 수 있고 변수는 하나의 값만 저장할 수 있으며 프로그램 수행 중에
		 * 값이 변경될 수 있기 때문에 변수라 부른다.
		 * 
		 * 자바에서 변수를 만들기 위해서는 그 변수에 담을 데이터 타입을 먼저
		 * 변수 앞에 지정하고 변수를 만들어야 하는데 이를 변수의 선언이라고 한다. 
		 * 변수의 데이터 타입을 변수명 앞에 지정하지 않으면 컴파일시 에러가 발생한다.
		 * 이렇게 컴파일시 변수의 타입을 체크하는 언어를 강 타입의 언어라고도 한다.
		 * 
		 * 변수와 같이 데이터를 구분하기 위해 사용하는 이름을 식별자(Identifier)라
		 * 하며 자바에서 식별자를 지정할 때 꼭 지켜야 하는 규칙이 있다.
		 * 식별자는 문자, 숫자, 2개의 특수문자($, _)를 사용해 명명할 수 있으며
		 * 식별자의 첫 문자는 숫자를 사용할 수 없고 반드시 문자나 2개의 특수문자로
		 * 시작해야 한다. 변수도 식별자 이므로 이 규칙을 따라 이름을 지어야 한다.
		 * 또한 자바에서 사용하는 예약어는 식별자로 사용할 수 없다.
		 * 
		 * 자바는 유니코드를 지원하는 언어로 여러 나라의 다양한 문자를 변수명으로
		 * 사용할 수 있기 때문에 한글을 사용해 변수명을 지정할 수 있지만 주로 영문을
		 * 사용한다. 또한 대문자와 소문자를 구분하므로 num, Num, NUM은 모두
		 * 다른 식별자로 구분되기 때문에 대소문자 사용에 주의를 기울여야 한다.
		 * 
		 * 적합한 변수명 : $harp, _7up, $ession, seven11
		 * 부적합한 변수명 : s#arp, #harp, 7up, &percent, 11, ?uestion
		 * */
		
		/* 자바에서 식별자를 명명하는 규칙(문법)으로 지정된 것은 아니지만
		 * 주로 아래와 같은 표기법을 이용해 식별자를 지정하는 것이 관례이다. 
		 * 
		 * ◆ 클래스, 인터페이스, 생성자
		 * 	   파스칼 표기법(Pascal Casing) 사용 -> MemberService
		 *  
		 * ◆  메서드, 멤버 필드(변수)
		 *    카멜 표기법(Camel Casing) 사용 -> memberInfo
		 *        
		 * ◆ 상수
		 *   전체 대문자로 표기하고 단어와 단어는 _로 구분 -> DEFAULT_STATE
		 *      
		 * ◆ 윈도우 GUI 프로그램 - Swing 등과 같은 화면 컨트롤
		 *   헝가리언 표기법(Hungarian Casing) -> txtName, lblAge
		 *    
		 * ◆ 패키지
		 *   전체 소문자로 표기 -> java.lang, com.javastudy.ch02 
		 **/
		
		/* int형 변수를 선언하고 동시에 값을 할당하고 있다.
		 * 자바에서는 하나의 문장이 끝나면 세미콜론(;)으로 문장의 종료를 알린다.
		 * 
		 * 아래와 같이 변수의 우측에 "=" 연산자를 사용해 값을 지정하는 것을 변수에
		 * 값을 "할당 한다." 또는 "대입 한다."라고 말하며 변수를 선언하고 그 변수에  
		 * 값을 최초로 할당하는 것을 변수의 초기화라고 말한다.
		 **/
		int x = 35;
		int y = 11;
		
		// x와 y의 값을 뺄셈과 나눗셈 연산을 수행하고 콘솔에 출력 
		System.out.println(x + " - " + y + " = " + (x - y));
		System.out.println(x + " / " + y + " = " + (x / y));
	}
}
