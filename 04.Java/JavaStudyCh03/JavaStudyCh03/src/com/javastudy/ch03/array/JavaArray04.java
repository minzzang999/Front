package com.javastudy.ch03.array;

// 버블 정렬을 이용한 배열 데이터 오름차순 정렬하기
public class JavaArray04 {
	
	public static void main(String[] args) {
		
		/* 자바에서 배열은 C나 C++과 달리 객체로 다루고 있다.
		 * 자바에서는 변수의 종류를 크게 기본형 변수와 참조형 변수로 나뉜다.
		 * 기본형 변수는 자바의 8개 기본형을 저장할 수 있는 변수를 말하며 그 크기 또한
		 * 각 기본형 타입의 크기와 동일하다. 하지만 참조형 변수는 객체가 생성된 메모리
		 * 주소의 참조 값을 저장하는 변수로 참조형 변수는 모두 4byte의 크기를 가진다.
		 * 다시 말해 기본형 변수에는 할당 하는 값 자체가 저장 되지만 참조형 변수에는
		 * 객체가 생성된 메모리 주소를 참조할 수 있는 4byte의 참조 값이 저장된다.
		 * 아래 1번과 같이 배열 변수를 선언하는 것은 단지 배열 데이터를 다루기 위해
		 * 메모리의 참조 값이 저장되는 참조형 변수를 위한 공간이 만들어 질 뿐 실제
		 * 배열이 생성되는 것은 아니다. 
		 * 배열에 데이터를 저장하기 위해서는 아래 2번과 같이 new 연산자를 이용해
		 * 배열을 생성해야 비로소 데이터를 저장할 수 있는 배열이 메모리 공간에 만들어 진다.
		 * 아래 3번과 4번 코드는 배열 변수 chars를 선언하고 배열에 데이터를 지정하여
		 * 배열 변수를 초기화 하는 코드로 변수의 선언과 동시에 메모리 공간에 배열이
		 * 생성되고 그 배열에 지정한 실제 데이터가 저장되는 코드이다.
		 * 
		 *  1. int[] nums;
		 *  2. String[] strs = new String[5];
		 *  3. char[] chars = { '가', '나', '다' };
		 *  4. int[] ints = new int[]{ 1, 2, 3, 4, 5 };
		 * */		
		
		/* int형 배열 변수 numbers를 선언하고 int형 데이터 10개를 저장할 수 있는 
		 * 배열을 생성하여 배열이 생성된 주소의 참조 값으로 numbers 변수를 초기화 한다.   
		 * int형 배열 변수 numbers는 기본 타입 변수가 아니라 참조 타입 변수로
		 * 위에서 언급한 것과 같이 4byte 크기를 가지며 저장 되는 값은 10개의 배열
		 * 데이터가 아니라 실제 배열이 생성된 메모리 주소의 참조 값이 저장된다.  
		 **/
		int[] numbers = {8, 3, 9, 1, 5, 0, 7, 6, 2, 4};	
		//int numbers[] = {8, 3, 9, 1, 5, 0, 7, 6, 2, 4};
		
		/* 배열에 저장된 데이터를 오름차순으로 정렬하기 위해 버블정렬 알고리즘을 이용해
		 * 크기순으로 정렬하는 코드로 버블정렬 알고리즘은 배열의 크기가 n개일 때 배열의 
		 * 첫 번째 요소부터 n-1까지의 요소를 다음에 오는 요소와 크기를 비교하여 자리
		 * 바꿈을 반복하는 것이다. 
		 **/
		for(int i = 0; i < numbers.length; i++) {			
			for(int j = 0; j < numbers.length -1; j++) {			
				/* 현재 배열의 요소와 바로 다음에 위치한 배열의 요소를 비교하여 현재의
				 * 요소가 크다면 즉 j == 0 일 때 배열의 첫 번째 요소와 두 번째 요소를
				 * 비교하여 첫 번째 요소가 크다면 첫 번째 요소를 뒤 쪽으로 옮기고
				 * 두 번째 요소를 앞으로 옮기는 작업을 한다.
				 **/
				if(numbers[j] > numbers[j + 1]) {					
					/* 임시 저장소로 사용할 temp 변수를 선언하고 크기가 큰 현재
					 * 위치의 요소를 temp 변수에 저장한 후 크기가 작은 다음 위치의
					 * 요소를 현재 위치에 저장한다. 그리고 temp 변수에 저장된
					 * 값을 다음 위치에 저장하여 현재 위치의 요소를 뒤 쪽으로 옮긴다. 
					 **/
					int temp = numbers[j];
					numbers[j] = numbers[j + 1];
					numbers[j + 1] = temp;					
				}				
			}			
			
			// 향상된 for 문을 이용해 numbers 배열의 정렬된 데이터를 출력한다. 
			for(int k : numbers) {
				System.out.print(k);
			}
			System.out.println();			
		}
	}
}
