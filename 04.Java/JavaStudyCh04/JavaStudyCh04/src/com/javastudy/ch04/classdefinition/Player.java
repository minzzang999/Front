package com.javastudy.ch04.classdefinition;

//게임에 참가하는 선수 정보를 클래스로 정의하고 사용하기
/* 객체(Object)란 실세계에 물리적으로 존재하거나 추상적인 것들 중에 속성을 가지고 있고
 * 다른 것과 식별이 가능한 것을 의미한다. 실제 물리적으로 존재하는 것은 사람, 컴퓨터, 
 * 책, 휴대폰, 자동차, 동물 등을 예로 들 수 있고 추상적인 것들은 실제로는 눈에 보이지
 * 않지만 현실 세계에서 행해지고 있는 것을 의미하고 주문, 강의, 수강 등이 있다.
 * 객체는 모두 속성(데이터)과 동작(기능)을 가지고 있는데 예를 들면 사람의 속성은 이름, 나이, 
 * 성별 등이 있고 동작은 말하다, 먹다, 걷다 등이 있다. 또한 휴대폰은 제조사, 사양, 가격 등의
 * 속성을 가지고 있고 화면을 켠다, 전화를 건다, 메일을 보낸다. 등의 동작이 있다.    
 * 객체의 속성(Property)을 필드(Field)라고도 부르며 동작을 메서드(Method)라고 부른다. 
 * 객체는 개별적으로 사용될 수도 있고 다른 객체와 관계를 맺고 더 크고 많은 속성과 기능을
 * 가질 수도 있다. 객체간의 관계에는 포함 관계와 상속 관계가 있으며 포함 관계는 현재 객체
 * 내부에서 또 다른 객체의 속성과 동작을 사용하는 것을 의미하고 상속 관계는 우리 인간
 * 세상의 상속과 같은 개념으로 부모 객체가 가지고 있는 속성과 기능을 자식 객체가 물려받아
 * 부모 객체로부터 물려받은 속성과 기능을 자식 객체가 사용할 수 있는 것을 의미한다.
 *       
 * 클래스는 객체의 속성과 동작을 정의해 놓은 설계도로 설계도를 보고 여러 개의 상품을
 * 대량 생산할 수 있는 것처럼 하나의 클래스를 정의해 놓고 여러 개의 객체를 생성할 수 있다.
 * 이렇게 여러 개의 객체를 찍어 내듯이 생성할 수 있어서 클래스를 객체의 틀이라도 한다.    
 * 
 * 프로그래밍에서 사용하는 모든 데이터를 객체로 보고 프로그램 구현에 필요한 객체를
 * 파악하여 객체의 역할을 정의하고 객체들 간의 상호작용을 통해 프로그램을 작성하는
 * 패러다임을 객체지향 프로그래밍(OOP, Object Oriented Programming)이라고 한다.
 * 객체지향 프로그래밍에는 앞에서 언급한 객체, 클래스, 상속의 개념 이외에도 인스턴스,
 * 추상화, 캡슐화, 다형성과 같은 다양한 개념들이 존재하며 추상화(Abstraction), 
 * 캡슐화(Encapsulation), 상속(Inheritance), 다형성(Polymorphism)은
 * 객체지향 프로그래밍의 대표적인 특징이라고 할 수 있다.
 **/

/* 실세계에 존재하는 객체를 컴퓨터 세계의 객체로 다루기 위해서 실세계의 대상 객체가  
 * 가지는 공통적인 특징(속성과 기능)을 도출해 아래와 같이 클래스로 정의하는 것을
 * 객체지향 프로그래밍에서는 추상화라고 한다. 
 **/
public class Player {
	
	/* 객체가 가지는 데이터는 객체의 현재 상태를 나타내는 값으로 클래스 안에서
	 * 변수로 정의하며 객체 안의 데이터를 속성(Property) 또는 필드(Field)라고 부른다.
	 **/
	public String name;
	public int age;
	public String gender;
	public String nationality;
	
	/* 객체의 동작은 함수로 정의하며 객체지향에서 클래스 안에 정의한 함수를 메소드라고 한다.  
	 * 프로그래밍에서 특정 동작을 코드로 묶어 놓은 것을 함수(Function)라고 부르지만
	 * 객체지향 프로그래밍에서는 클래스 내부에 정의한 함수를 메서드(Method)라고 부른다.
	 * 함수와 메서드가 각각 존재하는 객체지향 프로그래밍 언어도 있지만 자바에서는 모든
	 * 속성과 동작이 클래스 내부에 작성되므로 객체가 가지는 동작을 메서드(Method)라고
  	 * 부른다. 객체가 제공하는 기능이 없다면 클래스 안에 Method는 정의하지 않을 수 있다.
	 **/
	public void hello() {
		System.out.println("Hi ~" + this.name);
	}
}
