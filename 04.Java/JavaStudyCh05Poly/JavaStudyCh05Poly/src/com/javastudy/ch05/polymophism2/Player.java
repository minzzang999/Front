package com.javastudy.ch05.polymophism2;

/* 메소드 오버라이딩(Method Overriding) 기법을 이용한 다형성
 * 여러 타입의 다양한 Player 객체를 받아 재생하는 기능을 제공하는 클래스
 **/
public class Player {
	
	/* 자바에서 객체를 생성하고 사용하는데 있어서 융통성을 부여하기 위해서 다형성이라는 
	 * 개념이 사용된다. 다형성은 다양한 형식과 기능을 가진다는 의미로 해석될 수 있으며
	 * 객체지향에서 다형성을 구현하는 방법은 상속과 추상화를 통해 다양하게 구현될 수 있다.
	 * 예를 들면 하나의 부모 클래스 타입으로 다양한 자식 클래스 타입의 인스턴스를 참조할
	 * 수 있는 것도 다형성이라 할 수 있으며 생성자 오버로딩을 통해서 하나의 생성자 이름으로
	 * 객체를 초기화 할 수 있는 여러 방법을 제공하는 것도 다형성이라고 말 할 수 있다.
	 * 물론 메서드 오버로딩도 하나의 이름으로 서로 다른 기능을 제공할 수 있으므로 이 또한
	 * 다형성이라고 할 수 있으며 아래와 같이 play() 메서드에서 부모타입 매개변수로 자식
	 * 타입의 여러 객체를 받아들여 작업할 수 있도록 구현하는 것도 다형성이라고 할 수 있다.
	 * 
	 * 상속과 추상화를 이용해 오버라이딩 기법과 업캐스팅을 활용하면 자식의 객체를 참조하는
	 * 부모 타입의 참조 변수를 통해서 자식의 오버라이딩된 메서드를 호출할 수 있게 된다.
	 * 이는 부모 타입으로 업캐스팅된 참조 변수를 통해서 실제 자식 클래스에서 재정의한
	 * 메서드를 호출할 수 있게 되므로 하나의 부모타입의 참조 변수로 각각의 기능을 제공하는 
	 * 여러 자식 클래스에서 재정의한 메서드를 동일한 방식으로 호출할 수 있다는 장점이 있다.
	 *  
	 * 이와 같이 상속을 통해서 하나의 객체가 상속 관계에 있는 여러 상위 타입의 자료형을
	 * 가질 수 있어서 아래와 같이 여러 객체가 하나의(동일한) 타입이나 방식으로 동작하거나
	 * 또는 하나의 이름을 통해서 다양한 기능을 구현할 수 있는 성질을 다형성이라고 말한다.    
	 **/
	public void play(Playable p) {
		
		/* 매개변수로 넘어온 Playable 인터페이스를 구현한 구현체에서 오버라이드한
		 * 메서드를 부모 타입인 하나의 Playable 타입의 참조 변수를 통해 아래와 같이
		 * 동일한 방식으로 모두 호출할 수 있다.    		
		 **/
		p.play();			
	}
}
